# -*- coding: utf-8 -*-
"""Iris_Flower_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vcD9otWID5JW4ItkkzK3RbXRV18L1OkS
"""

import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

df = sns.load_dataset('iris')
df.head()

df['species'], categories = pd.factorize(df['species'])
df.head()

df.describe()

df.isna().sum()

from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df.petal_length, df.petal_width, c=df.species)
ax.set_xlabel('petal_length')
ax.set_ylabel('petal_width')
ax.set_zlabel('species')
plt.title('3D plot of iris dataset')
plt.show()

from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df.sepal_length, df.sepal_width, c=df.species)
ax.set_xlabel('sepal_length')
ax.set_ylabel('sepal_width')
ax.set_zlabel('species')
plt.title('3D plot of iris dataset')
plt.show()

sns.scatterplot(data=df, x='petal_length', y='petal_width', hue='species')

sns.scatterplot(data=df, x='sepal_length', y='sepal_width', hue='species')

k_rng = range(1, 10)
sse = []

for k in k_rng:
    km = KMeans(n_clusters=k)
    km.fit(df[['petal_length', 'petal_width']])
    sse.append(km.inertia_)

sse

plt.xlabel('k_rng')
plt.ylabel('Sum of squared error')
plt.plot(k_rng, sse)

km = KMeans(n_clusters=3, random_state=0)
y_predicted = km.fit_predict(df[['petal_length', 'petal_width']])
y_predicted

df['cluster'] = y_predicted
df.head(150)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(df.cluster, df.species)
cm

true_labels = df.species
predicted_labels = df.cluster

cm = confusion_matrix(true_labels, predicted_labels)
class_labels = ['setosa', 'versicolor', 'virginica']



plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
plt.title('Confusion matrix')
plt.colorbar()
tick_marks = np.arange(len(class_labels))
plt.xticks(tick_marks, class_labels, rotation=45)
plt.yticks(tick_marks, class_labels)


for i in range(len( class_labels)):
    for j in range(len(class_labels)):
        plt.text(j, i, str(cm[i][j]), ha='center', va='center', color='red')


plt.xlabel('Predicted label')
plt.ylabel('True label')
plt.show()



